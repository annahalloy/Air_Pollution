# Let's add a column to iris: country of origin
#------------------#
iris
iris$Country <- NA
iris$Country <- rep(rep(c("Spain", "France", "Germany", "Switzerland", "Italy"),
each=10), 3)
str(iris)
iris$Country <- as.factor(iris$Country)
# basic plot
#------------------#
hist(iris$Petal.Length)
iris
iris$Country <- NA
iris$Country <- rep(rep(c("Spain", "France", "Germany", "Switzerland", "Italy"),
each=10), 3)
str(iris)
iris$Country <- as.factor(iris$Country)
#------------------#
########################################################
###--------------------------------------------------###
### 1. Histogram ---------------------------------------
###--------------------------------------------------###
# basic plot
#------------------#
hist(iris$Petal.Length)
#------------------#
hist(iris$Sepal.Length, xlim=c(0, 8), ylim=c(0,35), las=1, breaks=15, col=2,
main="Sepal length and width", xlab="Sepal length and width [mm]")
hist(iris$Sepal.Width, breaks=10, col=3, add=T)
iris
iris$Country <- NA
iris$Country <- rep(rep(c("Spain", "France", "Germany", "Switzerland", "Italy"),
each=10), 3)
str(iris)
iris$Country <- as.factor(iris$Country)
#------------------#
########################################################
###--------------------------------------------------###
### 1. Histogram ---------------------------------------
###--------------------------------------------------###
# basic plot
#------------------#
hist(iris$Petal.Length)
#------------------#
# nicer plot
#------------------#
hist(iris$Sepal.Length, xlim=c(0, 8), ylim=c(0,35), las=1, breaks=15, col=2,
main="Sepal length and width", xlab="Sepal length and width [mm]")
hist(iris$Sepal.Width, breaks=10, col=3, add=T)
#------------------#
# display species
#------------------#
hist(iris$Sepal.Length[iris$Species=="setosa"], xlim=c(4, 8), ylim=c(0,35), las=1,
col=2, main="Sepal length and width", xlab="Sepal length and width [mm]")
hist(iris$Sepal.Length[iris$Species=="versicolor"], xlim=c(4, 8), ylim=c(0,35), las=1,
col=3, add=T)
hist(iris$Sepal.Length[iris$Species=="virginica"], xlim=c(4, 8), ylim=c(0,35), las=1,
col=4, add=T)
# --> overlap of data, better use a boxplot (see next chapter)
#------------------#
# get out data from a plot
#------------------#
hist(iris$Petal.Length, plot=FALSE)
#------------------#
# use the extracted data (e.g. for another plot)
#------------------#
x <- hist(iris$Petal.Length, plot=F)$mids
y <- hist(iris$Petal.Length, plot=F)$density
plot(x, y, type="l")
#------------------#
iris
iris$Country <- NA
iris$Country <- rep(rep(c("Spain", "France", "Germany", "Switzerland", "Italy"),
each=10), 3)
str(iris)
iris$Country <- as.factor(iris$Country)
#------------------#
########################################################
###--------------------------------------------------###
### 1. Histogram ---------------------------------------
###--------------------------------------------------###
# basic plot
#------------------#
hist(iris$Petal.Length)
# nicer plot
#------------------#
hist(iris$Sepal.Length, xlim=c(0, 8), ylim=c(0,35), las=1, breaks=15, col=2,
main="Sepal length and width", xlab="Sepal length and width [mm]")
hist(iris$Sepal.Width, breaks=10, col=3, add=T)
# display species
#------------------#
hist(iris$Sepal.Length[iris$Species=="setosa"], xlim=c(4, 8), ylim=c(0,35), las=1,
col=2, main="Sepal length and width", xlab="Sepal length and width [mm]")
hist(iris$Sepal.Length[iris$Species=="versicolor"], xlim=c(4, 8), ylim=c(0,35), las=1,
col=3, add=T)
hist(iris$Sepal.Length[iris$Species=="virginica"], xlim=c(4, 8), ylim=c(0,35), las=1,
col=4, add=T)
# get out data from a plot
#------------------#
hist(iris$Petal.Length, plot=FALSE)
# get out data from a plot
#------------------#
hist(iris$Petal.Length, plot=FALSE)
# use the extracted data (e.g. for another plot)
#------------------#
x <- hist(iris$Petal.Length, plot=F)$mids
y <- hist(iris$Petal.Length, plot=F)$density
plot(x, y, type="l")
View(iris)
# basic plot
#------------------#
hist(iris$Petal.Length)
hist(iris$Sepal.Length, xlim=c(0, 8), ylim=c(0,35), las=1, breaks=15, col=2,
main="Sepal length and width", xlab="Sepal length and width [mm]")
hist(iris$Sepal.Width, breaks=10, col=3, add=T)
library(tidyverse)
library(chron)
source("functions_extra.R")
setwd("~/Documents/EPFL/MA2/air_pollution/project/Air_Pollution")
library(tidyverse)
library(chron)
source("functions_extra.R")
Sys.setlocale("LC_TIME","C")
options(stringsAsFactors=FALSE)
options(chron.year.abb=FALSE)
theme_set(theme_bw()) # just my preference for plots
# load data
Month2Season <- function(month) {
## month is an integer (1-12)
## a factor with levels {"DJF", "MAM", "JJA", "SON"} is returned
seasons <- c("DJF", "MAM", "JJA", "SON")
index <- findInterval(month %% 12, seq(0, 12, 3))
factor(seasons[index], seasons)
}
Month2Season(c(1, 3, 12))
ReadTSeries <- function(filename, timecolumn="datetime", timeformat="%d.%m.%Y %H:%M") {
## read the table, strip units in column names, rename time column
##   and change data type of time column from a string of characters to
##   a numeric type so that we can perform operations on it
data <- read.table(filename, skip=5, header=TRUE, sep=";", check.names=FALSE)
names(data) <- sub("[ ].*$","",names(data)) # strip units for simplification
names(data) <- sub("Date/time", timecolumn, names(data), fixed=TRUE)
data[,timecolumn] <- as.chron(data[,timecolumn], timeformat) - 1/24 # end time -> start time
## extract additional variables from the time column
data[,"year"] <- years(data[,timecolumn])
data[,"month"] <- months(data[,timecolumn])
data[,"day"] <- days(data[,timecolumn])
data[,"hour"] <- hours(data[,timecolumn])
data[,"dayofwk"] <- weekdays(data[,timecolumn])
data[,"daytype"] <- ifelse(data[,"dayofwk"] %in% c("Sat","Sun"), "Weekend", "Weekday")
data[,"season"] <- Month2Season(unclass(data[,"month"]))
## return value
data
}
datapath <- file.path("MAGLAUS")
df <- full_join(cbind(site="LAU", ReadTSeries(file.path(datapath, "LAU.csv"))),
cbind(site="MAG", ReadTSeries(file.path(datapath, "MAG.csv"))))
head(df)
tail(df)
lf <- df %>%
gather(variable, value,
-c(site, datetime, season, year, month, day, hour, dayofwk, daytype))
# View variability in pollutant concentrations
ggplot(lf)+                                        # `lf` is the data frame
facet_grid(variable~site, scale="free_y")+         # panels created out of these variables
geom_line(aes(datetime, value, color=site))+       # plot `value` vs. `time` as lines
scale_x_chron()+                                   # format x-axis labels (time units)
theme(axis.text.x=element_text(angle=30, hjust=1)) # rotate x-axis labels
# seasonal variations
ggplot(lf) +
facet_grid(variable ~ site, scale = "free_y") +
geom_boxplot(aes(month, value), outlier.size = 0.5, outlier.shape = 3)
# by day type (weekday/weekend) and season
lf %>%
filter(site=="LAU" & !is.na(value)) %>%
ggplot +
facet_grid(variable ~ season, scale = "free_y") +
geom_boxplot(aes(daytype, value), outlier.size = 0.5, outlier.shape = 3)
# daily precipitation culumative
lf %>%
filter(site=="LAU" & !is.na(value) & variable=="PREC") %>%
ggplot +
facet_grid(variable ~ season, scale = "free_y") +
geom_bar(aes(daytype, value), stat="summary", fun="mean", show.legend = FALSE) +
scale_y_continuous("Daily mean precipitation (mm)", expand=expansion(mult=c(0, 0.1)))
# Diurnal variations
Percentile <- function(perc) { function (x)
## `perc` is the percentile which should be computed for the numeric vector `x`
quantile(x, perc*1e-2, na.rm=TRUE)
}
lf %>%
filter(site=="LAU" & !is.na(value)) %>%
ggplot(aes(x=hour, y=value, group=daytype, color=daytype)) +
facet_grid(variable ~ season, scale = "free_y", drop=TRUE) +
geom_line(stat="summary", fun="median")+
geom_errorbar(stat="summary",
fun.min=Percentile(25),
fun.max=Percentile(75))+
ggtitle("LAU")
